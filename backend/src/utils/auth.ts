import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const getPepper = (): string => {
  const pepper = process.env.PASSWORD_PEPPER;
  if (!pepper) {
    // This is a critical configuration error. The app should not run without a pepper.
    throw new Error('PASSWORD_PEPPER environment variable is not set!');
  }
  return pepper;
};

// Hash password with salt (auto-generated by bcrypt) and pepper
export const hashPassword = async (password: string): Promise<string> => {
  const saltRounds = 12;
  const pepper = getPepper();
  // Combine password with the pepper before hashing
  return await bcrypt.hash(password + pepper, saltRounds);
};

// Compare password using the pepper
export const comparePassword = async (password: string, hashedPassword: string): Promise<boolean> => {
  const pepper = getPepper();
  // Combine the candidate password with the pepper before comparing
  return await bcrypt.compare(password + pepper, hashedPassword);
};

// Generate JWT token (this function remains the same)
export const generateToken = (userId: string, email: string): string => {
  return jwt.sign(
    { 
      userId: userId,
      email: email
    },
    process.env.JWT_SECRET || 'fallback-secret-key',
    { expiresIn: '24h' }
  );
};